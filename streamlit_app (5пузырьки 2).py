import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import chardet
from io import BytesIO
import numpy as np

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –û—Ä–ª–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_name):
    with open(file_name, 'rb') as f:
        result = chardet.detect(f.read(10000))
    try:
        df = pd.read_csv(file_name, sep=';', encoding=result['encoding'])
    except UnicodeDecodeError:
        try:
            df = pd.read_csv(file_name, sep=';', encoding='utf-8')
        except:
            df = pd.read_csv(file_name, sep=';', encoding='cp1251')
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.rename(columns=lambda x: x.strip())
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
    df['Name'] = df['Name'].str.strip()
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–¥–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
def get_available_years(df_dict):
    years = set()
    for df, _ in df_dict.values():
        year_columns = [col for col in df.columns if col.isdigit() and len(col) == 4]
        years.update(year_columns)
    return sorted(years, key=int)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
try:
    ch_1_6 = load_data('Ch_1_6.csv')
    ch_3_18 = load_data('Ch_3_18.csv')
    ch_5_18 = load_data('Ch_5_18.csv')
    pop_3_79 = load_data('Pop_3_79.csv')
    rpop = load_data('RPop.csv')
    housing = load_data('housing.csv')
    investment = load_data('Investment.csv')
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# –°–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
population_data_dict = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": (ch_1_6, "#1f77b4"),
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": (ch_3_18, "#ff7f0e"),
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": (ch_5_18, "#2ca02c"),
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": (pop_3_79, "#d62728"),
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": (rpop, "#9467bd")
}

housing_data = (housing, "#8c564b")
investment_data = (investment, "#17becf")

available_years = get_available_years(population_data_dict)

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    all_locations = ch_1_6['Name'].unique()
    selected_location = st.selectbox("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:", all_locations, index=0)
    
    selected_topics = st.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è:",
        list(population_data_dict.keys()),
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç", "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]
    )
    
    st.title("–î–æ–ª—è –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏")
    share_topics = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–µ–π:",
        [k for k in population_data_dict.keys() if k != "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"],
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç"]
    )
    
    selected_year = st.selectbox(
        "–ì–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        available_years,
        index=len(available_years)-1
    )
    
    # –ë–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∂–∏–ª—å–µ–º
    st.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∂–∏–ª—å–µ–º")
    correlation_topic_housing = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∂–∏–ª—å–µ–º:",
        list(population_data_dict.keys()),
        index=0,
        key="housing_corr_select"
    )
    
    # –ë–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
    st.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏")
    correlation_topic_investment = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏:",
        list(population_data_dict.keys()),
        index=0,
        key="investment_corr_select"
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title(f"üìä –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {selected_location}")

# 1. –ü—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
if selected_topics:
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
    
    years_list = []
    categories_list = []
    values_list = []
    colors_list = []
    
    for year in available_years:
        for topic in selected_topics:
            df, color = population_data_dict[topic]
            value = df[df['Name'] == selected_location][year].values[0]
            years_list.append(year)
            categories_list.append(topic)
            values_list.append(value)
            colors_list.append(color)
    
    fig = go.Figure()
    
    for i, year in enumerate(available_years):
        year_mask = [y == year for y in years_list]
        year_categories = [c for c, mask in zip(categories_list, year_mask) if mask]
        year_values = [v for v, mask in zip(values_list, year_mask) if mask]
        year_colors = [c for c, mask in zip(colors_list, year_mask) if mask]
        
        fig.add_trace(go.Scatter(
            x=[i]*len(year_categories),
            y=year_categories,
            text=year_values,
            mode='markers',
            marker=dict(
                size=year_values,
                sizemode='area',
                sizeref=2.*max(values_list)/(40.**2),
                sizemin=4,
                color=year_colors,
                opacity=0.7,
                line=dict(width=1, color='DarkSlateGrey')
            ),
            name=str(year),
            hovertemplate="<b>%{y}</b><br>–ì–æ–¥: %{text}<br>–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: %{marker.size:,} —á–µ–ª.<extra></extra>"
        ))
    
    fig.update_layout(
        xaxis=dict(
            tickvals=list(range(len(available_years))),
            ticktext=available_years,
            title="–ì–æ–¥"
        ),
        yaxis=dict(
            title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            categoryorder='array',
            categoryarray=selected_topics
        ),
        hovermode="closest",
        showlegend=False,
        height=600,
        template="plotly_white"
    )
    
    for i in range(len(available_years)):
        fig.add_vline(
            x=i-0.5,
            line_width=1,
            line_dash="dot",
            line_color="grey"
        )
    
    st.plotly_chart(fig, use_container_width=True, key="bubble_chart")

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π]

# 6. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
if correlation_topic_investment:
    st.subheader(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É {correlation_topic_investment} –∏ –æ–±—ä–µ–º–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π ({selected_year} –≥–æ–¥)")
    
    try:
        topic_df, topic_color = population_data_dict[correlation_topic_investment]
        investment_df, _ = investment_data
        
        merged = pd.merge(
            topic_df[['Name', selected_year]],
            investment_df[['Name', selected_year]],
            on='Name',
            suffixes=('_pop', '_investment')
        ).dropna()
        
        if len(merged) < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏.")
        else:
            merged[f'{selected_year}_pop'] = pd.to_numeric(
                merged[f'{selected_year}_pop'].astype(str).str.replace(',', '.'), 
                errors='coerce'
            )
            merged[f'{selected_year}_investment'] = pd.to_numeric(
                merged[f'{selected_year}_investment'].astype(str).str.replace(',', '.'), 
                errors='coerce'
            )
            
            merged = merged.dropna()
            
            if len(merged) < 2:
                st.warning("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            else:
                corr = np.corrcoef(merged[f'{selected_year}_pop'], merged[f'{selected_year}_investment'])[0, 1]
                
                fig_corr = px.scatter(
                    merged,
                    x=f'{selected_year}_pop',
                    y=f'{selected_year}_investment',
                    hover_data=['Name'],
                    labels={
                        f'{selected_year}_pop': f'{correlation_topic_investment} (—á–µ–ª.)',
                        f'{selected_year}_investment': '–û–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (—Ä—É–±./—á–µ–ª.)'
                    },
                    trendline="ols",
                    color_discrete_sequence=[topic_color]
                )
                
                fig_corr.update_layout(
                    title=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {corr:.2f}",
                    height=600
                )
                
                selected_data = merged[merged['Name'] == selected_location]
                if not selected_data.empty:
                    fig_corr.add_trace(go.Scatter(
                        x=selected_data[f'{selected_year}_pop'],
                        y=selected_data[f'{selected_year}_investment'],
                        mode='markers',
                        marker=dict(
                            color='red',
                            size=12,
                            line=dict(width=2, color='black')
                        ),
                        name=f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {selected_location}",
                        hoverinfo='text',
                        hovertext=f"{selected_location}<br>{correlation_topic_investment}: {selected_data[f'{selected_year}_pop'].values[0]:.2f}<br>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {selected_data[f'{selected_year}_investment'].values[0]:.2f}"
                    ))
                
                st.plotly_chart(fig_corr, use_container_width=True, key="investment_corr_chart")
                
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")
        st.write("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–∞—Ö –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç.")

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
