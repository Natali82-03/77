import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import chardet
from io import BytesIO
import numpy as np

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –û—Ä–ª–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_name):
    with open(file_name, 'rb') as f:
        result = chardet.detect(f.read(10000))
    try:
        df = pd.read_csv(file_name, sep=';', encoding=result['encoding'])
    except UnicodeDecodeError:
        try:
            df = pd.read_csv(file_name, sep=';', encoding='utf-8')
        except:
            df = pd.read_csv(file_name, sep=';', encoding='cp1251')
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.rename(columns=lambda x: x.strip())
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
    df['Name'] = df['Name'].str.strip()
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–¥–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
def get_available_years(df_dict):
    years = set()
    for df, _ in df_dict.values():
        year_columns = [col for col in df.columns if col.isdigit() and len(col) == 4]
        years.update(year_columns)
    return sorted(years, key=int)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
try:
    ch_1_6 = load_data('Ch_1_6.csv')
    ch_3_18 = load_data('Ch_3_18.csv')
    ch_5_18 = load_data('Ch_5_18.csv')
    pop_3_79 = load_data('Pop_3_79.csv')
    rpop = load_data('RPop.csv')
    housing = load_data('housing.csv')
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# –°–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
population_data_dict = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": (ch_1_6, "#1f77b4"),
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": (ch_3_18, "#ff7f0e"),
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": (ch_5_18, "#2ca02c"),
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": (pop_3_79, "#d62728"),
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": (rpop, "#9467bd")
}

housing_data = (housing, "#8c564b")

available_years = get_available_years(population_data_dict)

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    all_locations = ch_1_6['Name'].unique()
    selected_location = st.selectbox("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:", all_locations, index=0)
    
    selected_topics = st.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è:",
        list(population_data_dict.keys()),
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç", "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]
    )
    
    st.title("–î–æ–ª—è –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏")
    share_topics = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–µ–π:",
        [k for k in population_data_dict.keys() if k != "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"],
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç"]
    )
    
    selected_year = st.selectbox(
        "–ì–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        available_years,
        index=len(available_years)-1
    )
    
    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∂–∏–ª—å–µ–º
    st.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∂–∏–ª—å–µ–º")
    correlation_topic = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∂–∏–ª—å–µ–º:",
        list(population_data_dict.keys()),
        index=0
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title(f"üìä –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {selected_location}")

# 1. –ü—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ (—Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –≥–æ–¥–∞–º)
if selected_topics:
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ–¥–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    years_list = []
    categories_list = []
    values_list = []
    colors_list = []
    
    for year in available_years:
        for topic in selected_topics:
            df, color = population_data_dict[topic]
            value = df[df['Name'] == selected_location][year].values[0]
            years_list.append(year)
            categories_list.append(topic)
            values_list.append(value)
            colors_list.append(color)
    
    # –°–æ–∑–¥–∞–µ–º –ø—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–∑—ã—Ä—å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    for i, year in enumerate(available_years):
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
        year_mask = [y == year for y in years_list]
        year_categories = [c for c, mask in zip(categories_list, year_mask) if mask]
        year_values = [v for v, mask in zip(values_list, year_mask) if mask]
        year_colors = [c for c, mask in zip(colors_list, year_mask) if mask]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞
        fig.add_trace(go.Scatter(
            x=[i]*len(year_categories),  # –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –æ—Å–∏ X (–Ω–æ–º–µ—Ä –≥–æ–¥–∞)
            y=year_categories,
            text=year_values,
            mode='markers',
            marker=dict(
                size=year_values,
                sizemode='area',
                sizeref=2.*max(values_list)/(40.**2),
                sizemin=4,
                color=year_colors,
                opacity=0.7,
                line=dict(width=1, color='DarkSlateGrey')
            ),
            name=str(year),
            hovertemplate="<b>%{y}</b><br>–ì–æ–¥: %{text}<br>–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: %{marker.size:,} —á–µ–ª.<extra></extra>"
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    fig.update_layout(
        xaxis=dict(
            tickvals=list(range(len(available_years))),
            ticktext=available_years,
            title="–ì–æ–¥"
        ),
        yaxis=dict(
            title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            categoryorder='array',
            categoryarray=selected_topics
        ),
        hovermode="closest",
        showlegend=False,
        height=600,
        template="plotly_white"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ–¥–æ–≤
    for i in range(len(available_years)):
        fig.add_vline(
            x=i-0.5,
            line_width=1,
            line_dash="dot",
            line_color="grey"
        )
    
    st.plotly_chart(fig, use_container_width=True)

# 2. –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
if share_topics and "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å" in population_data_dict:
    st.subheader(f"–î–æ–ª—è –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤ {selected_location}")
    fig_percent = go.Figure()
    
    rpop_data = population_data_dict["–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"][0]
    rpop_values = rpop_data[rpop_data['Name'] == selected_location][available_years].values.flatten()
    
    for topic in share_topics:
        df, color = population_data_dict[topic]
        values = df[df['Name'] == selected_location][available_years].values.flatten()
        
        percentages = [round((v/rpop)*100, 2) if rpop !=0 else 0 
                     for v, rpop in zip(values, rpop_values)]
        
        fig_percent.add_trace(go.Scatter(
            x=available_years,
            y=percentages,
            name=f"{topic} (%)",
            line=dict(color=color, width=3),
            mode='lines+markers',
            hovertemplate="<b>%{x}</b><br>%{y:.2f}%<extra></extra>"
        ))
    
    fig_percent.update_layout(
        xaxis_title="–ì–æ–¥",
        yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏",
        hovermode="x unified",
        legend=dict(orientation="h", yanchor="bottom", y=1.02),
        height=500,
        template="plotly_white"
    )
    st.plotly_chart(fig_percent, use_container_width=True)

# 3. –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–µ–π –ø–æ –≤—Å–µ–º –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º
if share_topics and len(share_topics) == 1 and "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å" in population_data_dict:
    st.subheader(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–ª–µ–π {share_topics[0]} –ø–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º ({selected_year} –≥–æ–¥)")
    
    topic_df, topic_color = population_data_dict[share_topics[0]]
    rpop_df = population_data_dict["–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"][0]
    
    merged = pd.merge(
        topic_df[['Name', selected_year]],
        rpop_df[['Name', selected_year]],
        on='Name',
        suffixes=('_cat', '_rpop')
    )
    merged['–î–æ–ª—è (%)'] = (merged[f'{selected_year}_cat'] / merged[f'{selected_year}_rpop']) * 100
    merged['–î–æ–ª—è (%)'] = merged['–î–æ–ª—è (%)'].round(2)
    merged = merged.sort_values('–î–æ–ª—è (%)', ascending=False)
    
    fig_all = px.bar(
        merged,
        x='Name',
        y='–î–æ–ª—è (%)',
        color_discrete_sequence=[topic_color],
        labels={'Name': '–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', '–î–æ–ª—è (%)': '–î–æ–ª—è (%)'},
        height=600
    )
    
    fig_all.update_layout(
        xaxis_title="–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç",
        yaxis_title=f"–î–æ–ª—è {share_topics[0]} –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ (%)",
        xaxis={'categoryorder':'total descending'},
        hovermode="x",
        showlegend=False
    )
    
    mean_val = merged['–î–æ–ª—è (%)'].mean()
    fig_all.add_hline(
        y=mean_val,
        line_dash="dot",
        line_color="gray",
        annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {mean_val:.2f}%",
        annotation_position="bottom right"
    )
    
    st.plotly_chart(fig_all, use_container_width=True)

# 4. –†–µ–π—Ç–∏–Ω–≥–∏ –¢–æ–ø-5
if selected_topics:
    st.subheader(f"–†–µ–π—Ç–∏–Ω–≥–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ ({selected_year} –≥–æ–¥)")
    
    for topic in selected_topics:
        df, color = population_data_dict[topic]
        
        col1, col2 = st.columns(2)
        
        with col1:
            top5 = df.nlargest(5, selected_year)[['Name', selected_year]].sort_values(selected_year)
            fig_top = px.bar(
                top5,
                x=selected_year,
                y='Name',
                orientation='h',
                title=f"üèÜ –¢–æ–ø-5 –ø–æ {topic}",
                color_discrete_sequence=['#2ca02c'],
                height=300
            )
            st.plotly_chart(fig_top, use_container_width=True)
        
        with col2:
            bottom5 = df.nsmallest(5, selected_year)[['Name', selected_year]].sort_values(selected_year, ascending=False)
            fig_bottom = px.bar(
                bottom5,
                x=selected_year,
                y='Name',
                orientation='h',
                title=f"‚ö†Ô∏è –ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ {topic}",
                color_discrete_sequence=['#d62728'],
                height=300
            )
            st.plotly_chart(fig_bottom, use_container_width=True)

# 5. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –∂–∏–ª—å–µ–º
if correlation_topic:
    st.subheader(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É {correlation_topic} –∏ –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥—å—é ({selected_year} –≥–æ–¥)")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∂–∏–ª—å—è
        topic_df, topic_color = population_data_dict[correlation_topic]
        housing_df, housing_color = housing_data
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        merged = pd.merge(
            topic_df[['Name', selected_year]],
            housing_df[['Name', selected_year]],
            on='Name',
            suffixes=('_pop', '_housing')
        ).dropna()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(merged) < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏.")
        else:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            merged[f'{selected_year}_pop'] = pd.to_numeric(
                merged[f'{selected_year}_pop'].astype(str).str.replace(',', '.'), 
                errors='coerce'
            )
            merged[f'{selected_year}_housing'] = pd.to_numeric(
                merged[f'{selected_year}_housing'].astype(str).str.replace(',', '.'), 
                errors='coerce'
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            merged = merged.dropna()
            
            if len(merged) < 2:
                st.warning("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                corr = np.corrcoef(merged[f'{selected_year}_pop'], merged[f'{selected_year}_housing'])[0, 1]
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Å–µ—è–Ω–∏—è
                fig_corr = px.scatter(
                    merged,
                    x=f'{selected_year}_pop',
                    y=f'{selected_year}_housing',
                    hover_data=['Name'],
                    labels={
                        f'{selected_year}_pop': f'{correlation_topic} (—á–µ–ª.)',
                        f'{selected_year}_housing': '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∂–∏–ª—å—è (–∫–≤.–º/—á–µ–ª.)'
                    },
                    trendline="ols",
                    color_discrete_sequence=[topic_color]
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                fig_corr.update_layout(
                    title=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {corr:.2f}",
                    height=600
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                selected_data = merged[merged['Name'] == selected_location]
                if not selected_data.empty:
                    fig_corr.add_trace(go.Scatter(
                        x=selected_data[f'{selected_year}_pop'],
                        y=selected_data[f'{selected_year}_housing'],
                        mode='markers',
                        marker=dict(
                            color='red',
                            size=12,
                            line=dict(width=2, color='black')
                        ),
                        name=f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {selected_location}",
                        hoverinfo='text',
                        hovertext=f"{selected_location}<br>{correlation_topic}: {selected_data[f'{selected_year}_pop'].values[0]:.2f}<br>–ñ–∏–ª—å–µ: {selected_data[f'{selected_year}_housing'].values[0]:.2f}"
                    ))
                
                st.plotly_chart(fig_corr, use_container_width=True)
                
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")
        st.write("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–∞—Ö –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç.")

# 6. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
exp_col1, exp_col2 = st.columns(2)

for topic in selected_topics:
    df, _ = population_data_dict[topic]
    
    with exp_col1:
        st.download_button(
            label=f"üìÑ {topic} (CSV)",
            data=df.to_csv(index=False).encode('utf-8'),
            file_name=f"{topic.replace(' ', '_')}.csv",
            mime="text/csv",
            key=f"csv_{topic}"
        )
    
    with exp_col2:
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False)
        st.download_button(
            label=f"üíæ {topic} (Excel)",
            data=output.getvalue(),
            file_name=f"{topic.replace(' ', '_')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key=f"excel_{topic}"
        )
