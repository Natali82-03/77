import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import base64
from io import BytesIO

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–∞ ---
def set_bg_image():
    with open('fon.jpg', "rb") as f:
        img_data = f.read()
    img_base64 = base64.b64encode(img_data).decode()
    
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/jpg;base64,{img_base64}");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

set_bg_image()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_name):
    try:
        df = pd.read_csv(file_name, sep=';', encoding='utf-8')
    except:
        try:
            df = pd.read_csv(file_name, sep=';', encoding='cp1251')
        except:
            df = pd.read_csv(file_name, sep=';')
    
    df = df.rename(columns=lambda x: x.strip())
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
    df['Name'] = df['Name'].str.strip()
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
try:
    ch_1_6 = load_data('Ch_1_6.csv')
    ch_3_18 = load_data('Ch_3_18.csv')
    ch_5_18 = load_data('Ch_5_18.csv')
    pop_3_79 = load_data('Pop_3_79.csv')
    rpop = load_data('RPop.csv')
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
data_dict = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": (ch_1_6, "#1f77b4"),
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": (ch_3_18, "#ff7f0e"),
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": (ch_5_18, "#2ca02c"),
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": (pop_3_79, "#d62728"),
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": (rpop, "#9467bd")
}

available_years = sorted(set(col for df, _ in data_dict.values() for col in df.columns if col.isdigit() and len(col) == 4), key=int)

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏ ---
with st.sidebar:
    # –õ–æ–≥–æ—Ç–∏–ø—ã
    col1, col2 = st.columns(2)
    with col1:
        st.image('min.png', width=100)
    with col2:
        st.image('ogu.png', width=100)
    
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    all_locations = ch_1_6['Name'].unique()
    selected_location = st.selectbox("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:", all_locations, index=0)
    
    selected_topics = st.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è:",
        list(data_dict.keys()),
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç", "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]
    )
    
    st.title("–î–æ–ª—è –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏")
    share_topics = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–µ–π:",
        [k for k in data_dict.keys() if k != "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"],
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç"]
    )
    
    selected_year = st.selectbox(
        "–ì–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        available_years,
        index=len(available_years)-1
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title(f"üìä –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {selected_location}")

# 1. –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
if selected_topics:
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ –≥–æ–¥–∞–º")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    animation_data = []
    for year in available_years:
        for topic in selected_topics:
            df, color = data_dict[topic]
            value = df[df['Name'] == selected_location][year].values[0]
            animation_data.append({
                '–ì–æ–¥': year,
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': topic,
                '–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å': value,
                '–¶–≤–µ—Ç': color
            })
    
    anim_df = pd.DataFrame(animation_data)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig = px.scatter(
        anim_df,
        x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        y='–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å',
        size='–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å',
        color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        color_discrete_map={topic: color for topic, (_, color) in data_dict.items()},
        animation_frame='–ì–æ–¥',
        range_y=[0, anim_df['–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å'].max() * 1.1],
        hover_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        hover_data={'–ì–æ–¥': True, '–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å': ':,', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': False},
        size_max=60,
        height=600,
        opacity=0.7
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    fig.update_layout(
        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        yaxis_title="–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å (—á–µ–ª.)",
        hovermode="closest",
        transition={'duration': 1000},
        updatemenus=[{
            'buttons': [{
                'args': [None, {'frame': {'duration': 500, 'redraw': True}, 'fromcurrent': True}],
                'label': '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏',
                'method': 'animate'
            }],
            'direction': 'left',
            'pad': {'r': 10, 't': 87},
            'showactive': False,
            'type': 'buttons',
            'x': 0.1,
            'y': 0
        }]
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    fig.update_traces(
        marker=dict(line=dict(width=1, color='DarkSlateGrey'))
    )
    
    st.plotly_chart(fig, use_container_width=True)

# 2. –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–µ–π (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

# CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ —Ñ–æ–Ω–µ
st.markdown("""
    <style>
    .stApp h1, .stApp h2, .stApp h3, .stApp p {
        color: #333333;
        text-shadow: 1px 1px 2px white;
    }
    .sidebar .sidebar-content {
        background-color: rgba(255,255,255,0.9);
    }
    </style>
""", unsafe_allow_html=True)
