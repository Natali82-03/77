import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import chardet
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –û—Ä–ª–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_name):
    with open(file_name, 'rb') as f:
        result = chardet.detect(f.read(10000))
    try:
        df = pd.read_csv(file_name, sep=';', encoding=result['encoding'])
    except UnicodeDecodeError:
        try:
            df = pd.read_csv(file_name, sep=';', encoding='utf-8')
        except:
            df = pd.read_csv(file_name, sep=';', encoding='cp1251')
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.rename(columns=lambda x: x.strip())
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' in df.columns:
        df = df.rename(columns={'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è': 'Name'})
    df['Name'] = df['Name'].str.strip()
    return df
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–¥–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
def get_available_years(df_dict):
    years = set()
    for df, _ in df_dict.values():
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –≥–æ–¥–∞–º–∏ (—Å–æ—Å—Ç–æ—è—Ç –∏–∑ 4 —Ü–∏—Ñ—Ä)
        year_columns = [col for col in df.columns if col.isdigit() and len(col) == 4]
        years.update(year_columns)
    return sorted(years, key=int)
# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
try:
    ch_1_6 = load_data('Ch_1_6.csv')      # –î–µ—Ç–∏ 1-6 –ª–µ—Ç
    ch_3_18 = load_data('Ch_3_18.csv')    # –î–µ—Ç–∏ 3-18 –ª–µ—Ç
    ch_5_18 = load_data('Ch_5_18.csv')    # –î–µ—Ç–∏ 5-18 –ª–µ—Ç
    pop_3_79 = load_data('Pop_3_79.csv')  # –ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç
    rpop = load_data('RPop.csv')          # –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: 1) –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ 2) –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π")
    st.stop()

# –°–ª–æ–≤–∞—Ä—å —Ç–µ–º (–Ω–∞–∑–≤–∞–Ω–∏–µ: (–¥–∞—Ç–∞—Ñ—Ä–µ–π–º, —Ü–≤–µ—Ç))
data_dict = {
    "–î–µ—Ç–∏ 1-6 –ª–µ—Ç": (ch_1_6, "#1f77b4"),
    "–î–µ—Ç–∏ 3-18 –ª–µ—Ç": (ch_3_18, "#ff7f0e"),
    "–î–µ—Ç–∏ 5-18 –ª–µ—Ç": (ch_5_18, "#2ca02c"),
    "–ù–∞—Å–µ–ª–µ–Ω–∏–µ 3-79 –ª–µ—Ç": (pop_3_79, "#d62728"),
    "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": (rpop, "#9467bd")
}

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –í—ã–±–æ—Ä –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    all_locations = ch_1_6['Name'].unique()
    selected_location = st.selectbox("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:", all_locations, index=0)
    
    # –í—ã–±–æ—Ä —Ç–µ–º (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    selected_topics = st.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è:",
        list(data_dict.keys()),
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç", "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]
    )
    
    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–µ–π
    st.title("–î–æ–ª—è –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
    share_topics = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∏:",
        [k for k in data_dict.keys() if k != "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"],
        default=["–î–µ—Ç–∏ 1-6 –ª–µ—Ç"]
    )
    
    # –í –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π selectbox –¥–ª—è –≥–æ–¥–∞)
    available_years = get_available_years(data_dict)
    selected_year = st.selectbox(
        "–ì–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¢–æ–ø-5:",
        available_years,
        index=len(available_years)-1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title(f"üìä –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {selected_location}")

# –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —ç—Ç–æ—Ç:

# 1. –ü—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
if selected_topics:
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ (–ø—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫)")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    plot_data = []
    for topic in selected_topics:
        df, color = data_dict[topic]
        location_data = df[df['Name'] == selected_location]
        for year in available_years:
            value = location_data[year].values[0]
            plot_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': topic,
                '–ì–æ–¥': year,
                '–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å': value,
                '–¶–≤–µ—Ç': color
            })
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    plot_df = pd.DataFrame(plot_data)
    
    # –°–æ–∑–¥–∞–µ–º –ø—É–∑—ã—Ä—å–∫–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig = px.scatter(
        plot_df,
        x='–ì–æ–¥',
        y='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        size='–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å',
        color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        color_discrete_map={topic: color for topic, (_, color) in data_dict.items()},
        hover_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        hover_data={'–ì–æ–¥': True, '–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å': ':,', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': False},
        size_max=40,
        height=500
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    fig.update_layout(
        xaxis_title="–ì–æ–¥",
        yaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        hovermode="closest",
        legend=dict(orientation="h", yanchor="bottom", y=1.02),
        template="plotly_white",
        showlegend=False
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>%{hovertext}</b><br>–ì–æ–¥: %{x}<br>–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: %{customdata[0]:,} —á–µ–ª.",
        marker=dict(line=dict(width=1, color='DarkSlateGrey'))
    
    st.plotly_chart(fig, use_container_width=True))
    
    # 1.5. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
    if share_topics and "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å" in data_dict:
        st.subheader("–î–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ (%)")
        fig_percent = go.Figure()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
        rpop_df = data_dict["–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"][0]
        rpop_data = rpop_df[rpop_df['Name'] == selected_location]
        
        for topic in share_topics:
            df, color = data_dict[topic]
            location_data = df[df['Name'] == selected_location]
            years = [str(year) for year in range(2019, 2025)]
            values = location_data[years].values.flatten()
            rpop_values = rpop_data[years].values.flatten()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            percentages = [round((value / rpop_value) * 100, 2) if rpop_value != 0 else 0 
                         for value, rpop_value in zip(values, rpop_values)]
            
            fig_percent.add_trace(go.Scatter(
                x=years,
                y=percentages,
                name=f"{topic} (%)",
                line=dict(color=color, width=3),
                mode='lines+markers',
                hovertemplate="<b>%{x}</b><br>%{y:.2f}%<extra></extra>"
            ))
        
        fig_percent.update_layout(
            xaxis_title="–ì–æ–¥",
            yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏",
            hovermode="x unified",
            legend=dict(orientation="h", yanchor="bottom", y=1.02),
            height=500,
            template="plotly_white"
        )
        st.plotly_chart(fig_percent, use_container_width=True)
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (–¥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏)

    # 1.6. –°—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–æ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
    if share_topics and "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å" in data_dict and len(share_topics) == 1:
        st.subheader(f"–î–æ–ª—è {share_topics[0]} –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º ({selected_year} –≥–æ–¥)")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏
        topic_df, topic_color = data_dict[share_topics[0]]
        rpop_df = data_dict["–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"][0]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        merged_df = pd.merge(
            topic_df[['Name', selected_year]],
            rpop_df[['Name', selected_year]],
            on='Name',
            suffixes=('_topic', '_rpop')
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é
        merged_df['–î–æ–ª—è (%)'] = (merged_df[f'{selected_year}_topic'] / merged_df[f'{selected_year}_rpop']) * 100
        merged_df['–î–æ–ª—è (%)'] = merged_df['–î–æ–ª—è (%)'].round(2)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ–ª–∏
        merged_df = merged_df.sort_values('–î–æ–ª—è (%)', ascending=False)
        
        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
        fig_all_locations = px.bar(
            merged_df,
            x='Name',
            y='–î–æ–ª—è (%)',
            color_discrete_sequence=[topic_color],
            labels={'Name': '–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', '–î–æ–ª—è (%)': f'–î–æ–ª—è {share_topics[0]} (%)'},
            height=600
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        fig_all_locations.update_layout(
            xaxis_title="–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç",
            yaxis_title=f"–î–æ–ª—è {share_topics[0]} –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ (%)",
            xaxis={'categoryorder':'total descending'},
            hovermode="x",
            template="plotly_white",
            showlegend=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        mean_value = merged_df['–î–æ–ª—è (%)'].mean()
        fig_all_locations.add_hline(
            y=mean_value,
            line_dash="dot",
            line_color="gray",
            annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {mean_value:.2f}%",
            annotation_position="bottom right"
        )
        
        st.plotly_chart(fig_all_locations, use_container_width=True)
    # 2. –†–µ–π—Ç–∏–Ω–≥ –∏ –∞–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ –¢–æ–ø-5
    st.subheader(f"–†–µ–π—Ç–∏–Ω–≥–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ ({selected_year} –≥–æ–¥)")
    
    for topic in selected_topics:
        df, color = data_dict[topic]
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        col_top, col_bottom = st.columns(2)
        
        # –¢–æ–ø-5 (–Ω–∞–∏–±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        with col_top:
            top5 = df.nlargest(5, selected_year)[['Name', selected_year]].sort_values(selected_year)
            fig_top = px.bar(
                top5,
                x=selected_year,
                y='Name',
                orientation='h',
                title=f"üèÜ –¢–æ–ø-5 –ø–æ {topic}",
                color_discrete_sequence=['#2ca02c'],  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö
                labels={'Name': '', selected_year: '–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å (—á–µ–ª.)'},
                height=300
            )
            fig_top.update_traces(
                hovertemplate="<b>%{y}</b><br>%{x:,} —á–µ–ª.<extra></extra>",
                texttemplate='%{x:,}',
                textposition='outside'
            )
            st.plotly_chart(fig_top, use_container_width=True)
        
        # –ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–∏–º–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        with col_bottom:
            bottom5 = df.nsmallest(5, selected_year)[['Name', selected_year]].sort_values(selected_year, ascending=False)
            fig_bottom = px.bar(
                bottom5,
                x=selected_year,
                y='Name',
                orientation='h',
                title=f"‚ö†Ô∏è –ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ {topic}",
                color_discrete_sequence=['#d62728'],  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥–∞
                labels={'Name': '', selected_year: '–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å (—á–µ–ª.)'},
                height=300
            )
            fig_bottom.update_traces(
                hovertemplate="<b>%{y}</b><br>%{x:,} —á–µ–ª.<extra></extra>",
                texttemplate='%{x:,}',
                textposition='outside'
            )
            st.plotly_chart(fig_bottom, use_container_width=True)

    # 3. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    export_col1, export_col2 = st.columns(2)
    
    for topic in selected_topics:
        df, _ = data_dict[topic]
        
        with export_col1:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv = df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8')
            st.download_button(
                label=f"üìÑ {topic} (CSV)",
                data=csv,
                file_name=f"{topic.replace(' ', '_')}.csv",
                mime="text/csv",
                key=f"csv_{topic}"
            )
        
        with export_col2:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name=topic[:30])
            st.download_button(
                label=f"üíæ {topic} (Excel)",
                data=output.getvalue(),
                file_name=f"{topic.replace(' ', '_')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key=f"excel_{topic}"
            )
else:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
